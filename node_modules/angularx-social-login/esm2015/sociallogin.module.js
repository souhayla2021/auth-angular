import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SocialAuthService } from './socialauth.service';
/**
 * The main module of angularx-social-login library.
 */
import * as ɵngcc0 from '@angular/core';
export class SocialLoginModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');
        }
    }
    static initialize(config) {
        return {
            ngModule: SocialLoginModule,
            providers: [
                SocialAuthService,
                {
                    provide: 'SocialAuthServiceConfig',
                    useValue: config
                }
            ]
        };
    }
}
SocialLoginModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocialLoginModule });
SocialLoginModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SocialLoginModule_Factory(t) { return new (t || SocialLoginModule)(ɵngcc0.ɵɵinject(SocialLoginModule, 12)); }, providers: [
        SocialAuthService
    ], imports: [[
            CommonModule
        ]] });
SocialLoginModule.ctorParameters = () => [
    { type: SocialLoginModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialLoginModule, { imports: function () { return [CommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialLoginModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                providers: [
                    SocialAuthService
                ]
            }]
    }], function () { return [{ type: SocialLoginModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFsbG9naW4ubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9Vc2Vycy9qZHV0dGEvUHJvamVjdHMvd2ViL2FuZ3VsYXJ4LXNvY2lhbC1sb2dpbi9wcm9qZWN0cy9saWIvc3JjL3NvY2lhbGxvZ2luLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLEVBRVQsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxpQkFBaUIsRUFBMkIsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRjtBQUNBO0FBQ0EsR0FBRzs7QUFTSCxNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBYUUsWUFBb0MsWUFBK0I7QUFDckUsUUFBSSxJQUFJLFlBQVksRUFBRTtBQUN0QixZQUFNLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0VBQXNFLENBQUMsQ0FBQztBQUNoRixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFuQlMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUErQjtBQUFJLFFBQzFELE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxpQkFBaUI7QUFDakMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsaUJBQWlCO0FBQ3pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHlCQUF5QjtBQUM1QyxvQkFBVSxRQUFRLEVBQUUsTUFBTTtBQUMxQixpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDs2Q0FyQkMsUUFBUSxTQUFDO0NBQ1IsT0FBTyxFQUFFLHNCQUNQLFlBQVksa0JBQ2Isa0JBQ0QsU0FBUyxFQUFFLHNCQUNULGlCQUFpQixrQkFDbEIsY0FDRjs7OztjQUNJO0FBQUM7QUFDVSxZQWFvQyxpQkFBaUIsdUJBQXRELFFBQVEsWUFBSSxRQUFRO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE5nTW9kdWxlLFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG4gIE1vZHVsZVdpdGhQcm92aWRlcnNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBTb2NpYWxBdXRoU2VydmljZSwgU29jaWFsQXV0aFNlcnZpY2VDb25maWcgfSBmcm9tICcuL3NvY2lhbGF1dGguc2VydmljZSc7XG5cbi8qKlxuICogVGhlIG1haW4gbW9kdWxlIG9mIGFuZ3VsYXJ4LXNvY2lhbC1sb2dpbiBsaWJyYXJ5LlxuICovXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIFNvY2lhbEF1dGhTZXJ2aWNlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU29jaWFsTG9naW5Nb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemUoY29uZmlnOiBTb2NpYWxBdXRoU2VydmljZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U29jaWFsTG9naW5Nb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFNvY2lhbExvZ2luTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFNvY2lhbEF1dGhTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogJ1NvY2lhbEF1dGhTZXJ2aWNlQ29uZmlnJyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBTb2NpYWxMb2dpbk1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1NvY2lhbExvZ2luTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIEFwcE1vZHVsZSBvbmx5Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=